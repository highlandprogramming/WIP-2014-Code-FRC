#include "WPILib.h"
#include "Solenoid.h"
#include "Compressor.h"

/*
 * stick 1 is: only driving
 * stick 2 is:
 * 			button3 fire piston out
 * 			button 2 fire piston in
 * 			button 9 hooks up
 * 			button 8 hooks down
 * 			trigger fire up wheels 
 */

class RobotDemo : public SimpleRobot
{
	
	
	RobotDrive myRobot;// robot drive system
	RobotDrive RobotDemo;
	Victor myShooter1;
	Victor myShooter2;
	Joystick stick1; 
	Joystick stick2;
	Compressor *compressor;
	Solenoid *s[8];// 1-firepin 3/4 - hooks
	bool blnshift;
	bool hooks;
	int firepin;
	int ludicrous;
	
	 
public:
	RobotDemo():
		
			
		myRobot(1,3,2,4),// these must be initialized in the same order
		RobotDemo(5,6),
		stick1(1),
		stick2(2)
		
	
		
	{
		//Init-----------
				compressor = new Compressor(1,1);
				s[0] = new Solenoid(1);
				s[1] = new Solenoid(2);
				s[2] = new Solenoid(3);
				s[3] = new Solenoid(4);
				s[4] = new Solenoid(5);
				s[5] = new Solenoid(6);
				s[6] = new Solenoid(7);
				s[7] = new Solenoid(8);
				myRobot.SetExpiration(0.1);
	}
		//Deconstructor
			~RobotDemo()
			{
				delete s[7];
				delete s[6];
				delete s[5];
				delete s[4];
				delete s[3];
				delete s[2];
				delete s[1];
				delete s[0];
				delete compressor;
				
				
			}
	
	/**
	 * Drive left & right motors for 2 seconds then stop
	 */
	void Autonomous()
	{
		GetWatchdog().Feed();
		myRobot.SetSafetyEnabled(false);
		myRobot.Drive(-0.5, 0.0); 	// drive forwards half speed
		Wait(2.0); 				//    for 2 seconds
		myRobot.Drive(0.0, 0.0); 	// stop robot
	}

	/**
	 * Runs the motors with arcade steering. 
	 */
	void OperatorControl()
	{
		//Pulldown.SetSafetyEnabled(true);
		ludicrous = 1; 
		firepin = 1;	
		hooks =false;
		compressor->Start();
		myRobot.SetSafetyEnabled(true);
		
		while (IsOperatorControl())
		{
			
			//Pulldown.ArcadeDrive(stick2);
			myRobot.ArcadeDrive(stick1); // drive with arcade style (use right stick)
			Wait(0.005);// wait for a motor update time
			GetWatchdog().Feed();
			//----------------------------------------------------------
			
		/*	if(stick1.GetRawButton(7))//SUPER SHIFTERS low gear
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1);
					s[3]->Set(true);
				
				}
			
			else if(stick1.GetRawButton(6))//SUPERSTIFTERS high gear
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1);
					s[3]->Set(false);
				}
		*/
		//-----------------------------------------------	
		
			if(stick2.GetRawButton(4) == 1)//fire motors
				{
				
				GetWatchdog().Feed();
				myRobot.ArcadeDrive(stick1); 
				Wait(0.005);
				myShooter1=100;
				myShooter2=-100;
				Wait(0.005);
				}
			else
				{
					myRobot.ArcadeDrive(stick1); 
					Wait(0.005);
					GetWatchdog().Feed();
				}
				
	
			if(stick2.GetRawButton(3)==(true))// firepin in
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1); 
					s[1]->Set(true);
					Wait(0.5);
														
				}
			
			else if(stick2.GetRawButton(2)== (true))//firepin out
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1); 
					s[1]->Set(false);
					Wait(0.5);														
				}
				
			
			//---------------------------------------------------
			if(stick2.GetRawButton(9)==(true))//hooks up
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1); 
					hooks = true;
					Wait(0.005);
				}
			else if(stick2.GetRawButton(8)== (true))
				{
					GetWatchdog().Feed();
					hooks = false;
					Wait(0.005);
				}
				
			if(hooks == true)
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1); 
					s[3]->Set(true);
					Wait(0.005);
				}
			else if(hooks == false)
				{
					GetWatchdog().Feed();
					myRobot.ArcadeDrive(stick1);
					s[3]->Set(false);
					Wait(0.005);
				}
			}
			
	}
	
	/*
	 * Runs during test mode
	 */
	void Test()
	{

	}
};

START_ROBOT_CLASS(RobotDemo);

